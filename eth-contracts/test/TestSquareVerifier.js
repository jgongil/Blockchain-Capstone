// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let SquareVerifier = artifacts.require('Verifier');
// Proof by zokrates
let sqproof = require("../../zokrates/code/square/proof");

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('SquareVerifier', accounts => {
    const account_one = accounts[0]; // owns the contract

    describe('Square Verifier Functionalities', function () {

        beforeEach(async function () { 
            this.contract = await SquareVerifier.new({from: account_one});
        });

        it('Verification test with correct proof', async function () { 
            try{
                let outcome = await this.contract.verifyTx.call(sqproof.proof.a,sqproof.proof.b,sqproof.proof.c,sqproof.inputs,{from:account_one});
                assert.equal(outcome, true, "Verification test with correct proof didn´t succeed");
                /*uint[2] memory a,
                uint[2][2] memory b,
                uint[2] memory c,
                uint[2] memory input */
            } catch(e){
                console.log("Positive verification failed: " + e);
            }
        });

        it('Verification test with incorrect proof', async function () { 
            try{
                let WrongInput = ["0x0000000000000000000000000000000000000000000000000000000000000002", "0x0000000000000000000000000000000000000000000000000000000000000001"]
                let outcome = await this.contract.verifyTx.call(sqproof.proof.a,sqproof.proof.b,sqproof.proof.c,WrongInput,{from:account_one});
                assert.equal(outcome, false, "Verification test with incorrect proof didn´t succeed");
            } catch(e){
                console.log("Negative verification failed: " + e);
            }
        }) 
    });   
});
    
// Test verification with incorrect proof
